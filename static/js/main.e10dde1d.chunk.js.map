{"version":3,"sources":["components/listItem.tsx","components/dataValidate.tsx","components/index.tsx","App.tsx","index.tsx"],"names":["robotAvatarOptions","style","color","backgroundColor","icon","RobotOutlined","userAvatarOptions","UserOutlined","RobotWrapperStyle","display","position","robotAvatarWrapperStyle","width","popWrapperStyle","margin","padding","robotArrowStyle","left","top","userArrowStyle","right","RobotItem","props","isUser","text","className","library","defaultInputOption","defaultModalOption","mask","marginRight","zIndex","bodyStyle","height","overflow","wrapClassName","functionDivStyle","paddingBottom","marginBottom","functionButtonStyle","imgStyle","imgAccept","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","push","reg","useReg","CustomerServiceOutlined","App","useState","modalOpen","setModalOpen","callb","useCallback","v","setTimeout","returnValue","value","RegExp","test","generateRespones","setList","prev","state","callback","modalOption","inputOption","initWelcome","initState","closeFunctionBar","list","inputValue","setInputValue","finalInputOption","useMemo","submit","sendImg","uploadRef","current","click","uploadChange","e","a","target","files","length","f","size","includes","type","console","res","img","src","alt","useRef","FunctionBar","title","onClick","DeleteOutlined","ref","accept","onChange","PictureOutlined","finalModalOption","footer","onPressEnter","marginLeft","EnterOutlined","useLayoutEffect","dom","document","querySelector","body","scrolltop","scrollHeight","scrollTop","useEffect","last","flag","sign","timer","window","clearTimeout","visible","map","it","index","key","useRegister","onOk","onCancel","render","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e10dde1d.chunk.js","sourcesContent":["import Avatar, { AvatarProps } from \"antd/lib/avatar/avatar\";\r\nimport React, { CSSProperties, ReactNode } from \"react\";\r\nimport { RobotOutlined, UserOutlined } from \"@ant-design/icons\";\r\n\r\nexport const robotAvatarOptions: AvatarProps = {\r\n\tstyle: { color: \"#f56a00\", backgroundColor: \"#fde3cf\" },\r\n\ticon: <RobotOutlined />,\r\n};\r\nexport const userAvatarOptions: AvatarProps = {\r\n\tstyle: { color: \"white\", backgroundColor: \"#87d068\" },\r\n\ticon: <UserOutlined />,\r\n};\r\n\r\nexport const RobotWrapperStyle: CSSProperties = {\r\n\tdisplay: \"flex\",\r\n\tposition: \"relative\",\r\n};\r\nexport const robotAvatarWrapperStyle: CSSProperties = {\r\n\twidth: \"32px\",\r\n};\r\nexport const popWrapperStyle: CSSProperties = {\r\n\twidth: \"calc(100% - 20px - 64px)\", //头像宽32*2 边距20\r\n\tmargin: \"10px\",\r\n\tpadding: \"10px\",\r\n};\r\n\r\nexport const robotArrowStyle: CSSProperties = {\r\n\tleft: \"40px\", //这个和下面那个user对应，改了必须都改\r\n\ttop: \"15px\",\r\n\tcolor: \"white\",\r\n};\r\nexport const userArrowStyle: CSSProperties = {\r\n\tright: \"40px\",\r\n\ttop: \"15px\",\r\n\tcolor: \"white\",\r\n};\r\nexport type ItemProps = {\r\n\tisUser?: boolean;\r\n\ttext: ReactNode;\r\n};\r\n\r\nexport function RobotItem(props: ItemProps) {\r\n\tconst { isUser, text } = props;\r\n\treturn (\r\n\t\t<div style={RobotWrapperStyle}>\r\n\t\t\t<div style={robotAvatarWrapperStyle}>\r\n\t\t\t\t{!isUser && <Avatar {...robotAvatarOptions}></Avatar>}\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"ant-popover-arrow\"\r\n\t\t\t\tstyle={isUser ? userArrowStyle : robotArrowStyle}\r\n\t\t\t></div>\r\n\t\t\t<div className=\"ant-popover-inner\" style={popWrapperStyle}>\r\n\t\t\t\t<span>{text}</span>\r\n\t\t\t</div>\r\n\t\t\t<div style={robotAvatarWrapperStyle}>\r\n\t\t\t\t{isUser && <Avatar {...userAvatarOptions}></Avatar>}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import { ReactNode } from \"react\";\r\nimport { RenderList } from \".\";\r\n\r\n//这个文件与index实际分离关系。\r\n\r\nexport type libraryType = Array<{\r\n\treg?: string;\r\n\ttext: ReactNode;\r\n\tuseReg?: RegExp;\r\n}>;\r\n\r\nexport let library: libraryType = [];\r\n\r\nexport function generateRespones(v: RenderList): ReactNode {\r\n\tif (typeof v.text === \"string\") {\r\n\t\tfor (let value of library) {\r\n\t\t\tif (value.reg) {\r\n\t\t\t\t//字符串全字匹配\r\n\t\t\t\tlet r = new RegExp(value.reg);\r\n\t\t\t\tif (r.test(v.text)) {\r\n\t\t\t\t\treturn value.text;\r\n\t\t\t\t}\r\n\t\t\t} else if (value.useReg && value.useReg.test(v.text)) {\r\n\t\t\t\t//使用自定义匹配\r\n\t\t\t\treturn value.text;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\treturn null;\r\n}\r\n","import { Button, Input } from \"antd\";\r\nimport { InputProps } from \"antd/lib/input\";\r\nimport Modal, { ModalProps } from \"antd/lib/modal/Modal\";\r\nimport React, {\r\n\tCSSProperties,\r\n\tReactNode,\r\n\tuseCallback,\r\n\tuseEffect,\r\n\tuseLayoutEffect,\r\n\tuseMemo,\r\n\tuseRef,\r\n\tuseState,\r\n} from \"react\";\r\nimport {\r\n\tEnterOutlined,\r\n\tDeleteOutlined,\r\n\tPictureOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { RobotItem } from \"./listItem\";\r\nimport \"./index.css\";\r\nexport * from \"./dataValidate\";\r\nexport * from \"./listItem\";\r\n\r\n//客服窗口的高度\r\nexport let modalHeight: number = 400;\r\n//antd的输入框接口\r\nexport const defaultInputOption: InputProps = {};\r\n//antd的modal接口\r\nexport const defaultModalOption: ModalProps = {\r\n\tmask: false,\r\n\tstyle: { marginRight: 0, zIndex: 10000 },\r\n\twidth: 300,\r\n\tbodyStyle: {\r\n\t\theight: `${modalHeight}px`,\r\n\t\toverflow: \"auto\",\r\n\t},\r\n\twrapClassName: \"yehuozhili\",\r\n};\r\n//初始语句延迟\r\nexport let initWelcomeDelay: number = 500;\r\n//功能条包裹div的样式\r\nexport const functionDivStyle: CSSProperties = {\r\n\tdisplay: \"flex\",\r\n\tpaddingBottom: \"10px\",\r\n\tmarginBottom: \"10px\",\r\n};\r\n//功能条按钮样式\r\nexport const functionButtonStyle: CSSProperties = {\r\n\tpadding: 0,\r\n\tmarginRight: \"10px\",\r\n};\r\n\r\n//图片显示到聊天框的样式\r\nexport const imgStyle: CSSProperties = {\r\n\twidth: \"100%\",\r\n};\r\n//允许图片验证通过的列表\r\nexport const imgAccept = [\"image/png\", \"image/jpeg\", \"image/gif\"];\r\n//允许图片验证通过的大小\r\nexport const imgMaxSize = 500000;\r\n//验证图片的函数，不满意自行修改\r\nexport let imgValidate = (f: File) => {\r\n\tif (f.size <= imgMaxSize && imgAccept.includes(f.type)) {\r\n\t\treturn true;\r\n\t} else {\r\n\t\tconsole.error(\"invalidate file\");\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nfunction getBase64(file: File) {\r\n\treturn new Promise<string>((resolve, reject) => {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.readAsDataURL(file);\r\n\t\treader.onload = () => resolve(reader.result as string);\r\n\t\treader.onerror = (error) => reject(error);\r\n\t});\r\n}\r\nexport interface RenderList {\r\n\tisUser: boolean;\r\n\ttext: ReactNode;\r\n}\r\n\r\nexport function useRegister(\r\n\t//modal状态\r\n\tstate: boolean,\r\n\t//获取用户回话的回调\r\n\tcallback?: (v: RenderList) => void,\r\n\tmodalOption?: ModalProps,\r\n\tinputOption?: InputProps,\r\n\tinitWelcome?: ReactNode,\r\n\tinitState?: RenderList[],\r\n\tcloseFunctionBar?: boolean\r\n): [ReactNode, React.Dispatch<React.SetStateAction<RenderList[]>>] {\r\n\t//存放渲染语句\r\n\tconst [list, setList] = useState<RenderList[]>(initState ? initState : []);\r\n\t//存放输入框内容\r\n\tconst [inputValue, setInputValue] = useState<string>(\"\");\r\n\r\n\tconst finalInputOption = useMemo(() => {\r\n\t\treturn { ...defaultInputOption, ...inputOption };\r\n\t}, [inputOption]);\r\n\r\n\tconst submit = useCallback(() => {\r\n\t\tif (inputValue !== \"\") {\r\n\t\t\tsetList((prev) => {\r\n\t\t\t\treturn [...prev, { isUser: true, text: inputValue }];\r\n\t\t\t});\r\n\t\t\tsetInputValue(\"\");\r\n\t\t}\r\n\t}, [inputValue]);\r\n\r\n\tconst sendImg = useCallback(() => {\r\n\t\tif (uploadRef.current) {\r\n\t\t\tuploadRef.current.click();\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst uploadChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target && e.target.files && e.target.files.length > 0) {\r\n\t\t\tconst file = e.target.files[0];\r\n\t\t\tif (imgValidate(file)) {\r\n\t\t\t\t//验证后获取blob\r\n\t\t\t\tlet res = await getBase64(file);\r\n\t\t\t\tconst img = (\r\n\t\t\t\t\t<img style={imgStyle} src={res} alt=\"user-img\"></img>\r\n\t\t\t\t);\r\n\t\t\t\tsetList((prev) => [...prev, { isUser: true, text: img }]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst uploadRef = useRef<HTMLInputElement>(null);\r\n\t//这个是功能条渲染部分\r\n\tconst FunctionBar = useMemo(() => {\r\n\t\tif (closeFunctionBar) {\r\n\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div style={functionDivStyle}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ttitle=\"清空\"\r\n\t\t\t\t\t\ttype=\"link\"\r\n\t\t\t\t\t\tonClick={() => setList([])}\r\n\t\t\t\t\t\tstyle={functionButtonStyle}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<DeleteOutlined />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tref={uploadRef}\r\n\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\tstyle={{ display: \"none\" }}\r\n\t\t\t\t\t\tvalue=\"\"\r\n\t\t\t\t\t\tonChange={uploadChange}\r\n\t\t\t\t\t></input>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ttitle=\"发送图片\"\r\n\t\t\t\t\t\ttype=\"link\"\r\n\t\t\t\t\t\tonClick={() => sendImg()}\r\n\t\t\t\t\t\tstyle={functionButtonStyle}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<PictureOutlined />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}, [closeFunctionBar, sendImg]);\r\n\r\n\tconst finalModalOption = useMemo(() => {\r\n\t\tconst footer = (\r\n\t\t\t<div>\r\n\t\t\t\t{FunctionBar}\r\n\t\t\t\t<div style={{ display: \"flex\" }}>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\t\tonChange={(e) => setInputValue(e.target.value)}\r\n\t\t\t\t\t\tonPressEnter={submit}\r\n\t\t\t\t\t\t{...finalInputOption}\r\n\t\t\t\t\t></Input>\r\n\t\t\t\t\t<Button style={{ marginLeft: \"5px\" }} onClick={submit}>\r\n\t\t\t\t\t\t<EnterOutlined />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\treturn { ...defaultModalOption, footer, ...modalOption };\r\n\t}, [FunctionBar, finalInputOption, inputValue, modalOption, submit]);\r\n\t//这个为了使得滚动条始终保持最底\r\n\tuseLayoutEffect(() => {\r\n\t\tconst dom = document.querySelector(\".yehuozhili\");\r\n\t\tif (dom) {\r\n\t\t\tlet body = dom.querySelector(\".ant-modal-body\") as HTMLElement;\r\n\t\t\tif (body) {\r\n\t\t\t\tlet height = body.scrollHeight;\r\n\t\t\t\tlet bodyheight = modalHeight;\r\n\t\t\t\tlet scrolltop = height - bodyheight;\r\n\t\t\t\tbody.scrollTop = scrolltop;\r\n\t\t\t}\r\n\t\t}\r\n\t}, [list]);\r\n\t//用来制作回调,过滤机器人发送\r\n\tuseEffect(() => {\r\n\t\tif (list.length > 0 && callback) {\r\n\t\t\tlet last = list[list.length - 1];\r\n\t\t\tif (last.isUser) {\r\n\t\t\t\tcallback(last);\r\n\t\t\t}\r\n\t\t}\r\n\t}, [callback, list]);\r\n\r\n\t//不能直接设到state初始值上，否则看起来怪异。\r\n\t//需要第一次用户打开时把语句设上\r\n\tconst flag: { sign: boolean } = useMemo(() => {\r\n\t\treturn { sign: true };\r\n\t}, []);\r\n\tuseEffect(() => {\r\n\t\tlet timer: number;\r\n\t\tif (flag.sign && state && initWelcome) {\r\n\t\t\ttimer = window.setTimeout(() => {\r\n\t\t\t\tflag.sign = false;\r\n\t\t\t\tsetList((prev) => [\r\n\t\t\t\t\t...prev,\r\n\t\t\t\t\t{ isUser: false, text: initWelcome },\r\n\t\t\t\t]);\r\n\t\t\t}, initWelcomeDelay);\r\n\t\t}\r\n\t\treturn () => window.clearTimeout(timer);\r\n\t}, [flag, initWelcome, state]);\r\n\r\n\tlet modalRender = (\r\n\t\t<Modal visible={state} {...finalModalOption}>\r\n\t\t\t{list.map((it, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<RobotItem\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tisUser={it.isUser}\r\n\t\t\t\t\t\ttext={it.text}\r\n\t\t\t\t\t></RobotItem>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</Modal>\r\n\t);\r\n\treturn [modalRender, setList];\r\n}\r\n","import React, { useCallback, useState } from \"react\";\nimport { useRegister } from \"./components\";\nimport { CustomerServiceOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { library, generateRespones, RenderList } from \"./components/index\";\n\n//text是语句，reg会生成正则匹配，useReg会使用自定义匹配\nlibrary.push(\n\t//语料库，push进去，也可以不用\n\t{\n\t\ttext: \"我是机器人\",\n\t\treg: \"你是谁\",\n\t},\n\t{\n\t\ttext: \"author is yehuozhili\",\n\t\tuseReg: /(.*?)作者是谁(.*?)/,\n\t},\n\t{\n\t\ttext: <CustomerServiceOutlined></CustomerServiceOutlined>,\n\t\tuseReg: /(.*?)表情(.*?)/,\n\t}\n);\n\nfunction App() {\n\tconst [modalOpen, setModalOpen] = useState(false);\n\t//使用useCllback避免用户输入时调用匹配！！！！！！！\n\tconst callb = useCallback((v: RenderList) => {\n\t\tsetTimeout(() => {\n\t\t\t//使用settimeout 更像机器人回话\n\t\t\tlet returnValue = generateRespones(v);\n\t\t\tif (returnValue) {\n\t\t\t\t//排除null\n\t\t\t\tsetList((prev) => [\n\t\t\t\t\t...prev,\n\t\t\t\t\t{ isUser: false, text: returnValue },\n\t\t\t\t]);\n\t\t\t}\n\t\t}, 500);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\t// 注册\n\tconst [render, setList] = useRegister(\n\t\tmodalOpen,\n\t\tcallb,\n\t\t{\n\t\t\tonOk: () => setModalOpen(false),\n\t\t\tonCancel: () => setModalOpen(false),\n\t\t\ttitle: \"h5-Dooring机器人客服\",\n\t\t},\n\t\t{},\n\t\t<div>welcome!我是机器人初始欢迎语句！！</div>\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: \"fixed\",\n\t\t\t\t\tright: \"10px\",\n\t\t\t\t\ttop: \"40%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Button type=\"primary\" onClick={() => setModalOpen(!modalOpen)}>\n\t\t\t\t\t<CustomerServiceOutlined></CustomerServiceOutlined>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t{render}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}